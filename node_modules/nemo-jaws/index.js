"use strict";

var Client = require('node-rest-client').Client,
    client = new Client(),
    debug = require('debug'),
    log = debug('nemo-jaws:log'),
    error = debug('nemo-jaws:error');
module.exports = {
    /**
     *    setup - initialize this functionality during nemo.setup
     *    @param _users {Object} (optional) - object of user definitions to create prior to callback
     *    @param _nemo {Object} - the nemo object, which is passed in automatically during nemo setup
     *    @param callback {Function} - typical errback function
     */
    "setup": function (stage, restUrl, nemo, callback) {

        //"stage": nemo.data.stage,
        //"baseUrl": nemo.data.jawsRestUrl || "http://jaws.corp.ebay.com/v1/QIJawsServices/restservices"
        nemo.jaws = function(_args) {
            var d = nemo.wd.promise.defer();

            var args = {
                headers: {
                    "hostName": stage + ".qa.paypal.com",
                    "Content-type": "application/json"
                }
            };
            if (_args.data) {
                args.data = _args.data;
            }
            if (_args.path) {
                args.path = _args.path;
            }
            if (_args.parameters) {
                args.parameters = _args.parameters;
            }
            function request() {

                var req = client[_args.method.toLowerCase()](restUrl + _args.restPath, args, function (data, response) {
                    if (data.errorCode) {
                        var err = new Error('error code' + data.errorCode + 'using args ' + JSON.stringify(args));
                        error(err);
                        d.reject(err);
                        return;
                    }
                    log('Successful response from Jaws client, fulfilling promise');
                    d.fulfill(data);
                });
                req.on('requestTimeout',function(req){
                    error("request has expired");
                    req.abort();
                });

                req.on('responseTimeout',function(res){
                    error("response has expired");
                    d.reject("response has expired");
                });

                //it's usefull to handle request errors to avoid, for example, socket hang up errors on request timeouts
                req.on('error', function(err){
                    error('request error',err);
                    d.reject(err);
                });
                return d;
            }

            var flow = nemo.wd.promise.controlFlow();
            flow.execute(request);
            return d;
        }
        callback(null);
    }
};
